@{
    ViewData["Title"] = "Home Page";
}

@model IEnumerable<ExpensesTracker.Models.Expense>

<div class="container mt-4">
    <h2>My Expenses</h2>
    <table class="table table-bordered">
        <thead class="table-light">
            <tr>
                <th>Description</th>
                <th>Amount</th>
                <th>Category</th>
                <th>Date</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Description</td>
                    <td>$ @item.Amount.ToString()</td>
                    <td>@item.Category</td>
                    <td>@item.Date.ToString("yyyy-MM-dd")</td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-secondary btn-sm">Edit</a>
                        <form asp-action="Delete" method="post" class="d-inline">
                            <input type="hidden" name="id" value="@item.Id" />
                            <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <h2 class="mt-8 mb-4">Expenses Overview</h2>
    <div class="mx-auto position-relative" style="max-width:500px; width:100%">
        <canvas id="myChart"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const ctx = document.getElementById('myChart');
    fetch('/Home/GetChart')
    .then(response => response.json())
    .then(data => {
        new Chart(ctx, {
          type: 'pie',
          data: {
            labels: data.map(d=>d.category),
            datasets: [{
              data: data.map(d=> d.totalAmount)
            }]
          }
        })
    });
</script>